-- ============================================================================
-- Utility functions used by other scripts
--
-- This has to be rebuilt into library.scpt if it changes. Running 'make'
-- will do this (see Makefile).
-- ============================================================================
-- Copy the contents of *old_note* into a new note titled *new_title*
--
on copy_note(old_note, new_title)
    tell application "Evernote"
        set my_content to HTML content of old_note
        set new_note to create note with text "" title new_title ¬
            notebook "Journal" tags "testing"
        set HTML content of new_note to my_content
    end tell
    return new_note
end copy_note

-- ============================================================================
-- Generate the title for a diary note based on *the_date*
--
on diary_title(the_date)
    set { year:y, month:m, day:d, weekday:wkday } to (the_date)
    set wdabbr to my lowercase(my substring(wkday as string, 1, 3))
    set m to zpad(1*m)
    set d to zpad(d)
    set the_title to y & "." & m & d & "." & wdabbr as string & " diary"
    return the_title
end diary_title

-- ============================================================================
-- Copy the content of *old_note* into a new note titled *new_title* with
-- the tags in *tag_list* in notebook *nbook*.
--
on duplicate_note(old_note, new_title, tag_list, nbook)
    tell application "Evernote"
        set my_content to HTML content of old_note
        set new_note to create note with text "" title new_title ¬
            notebook nbook tags tag_list
        set HTML content of new_note to my_content
    end tell
    return new_note
end duplicate_note

-- ============================================================================
-- Ensure that notebook *nb_name* exists
--
on ensure_notebook(nb_name)
    tell application "Evernote"
        if not exists notebook named nb_name
            create notebook nb_name
        end if
    end tell
end ensure_notebook

-- ============================================================================
-- Return the lowercase version of *this_text*
--
on lowercase(this_text)
    set rval to do shell script "echo " & quoted form of (this_text) & " | tr A-Z a-z"
    return rval as string
end lowercase

-- ============================================================================
-- Add *the_tag* to *the_note* if it's not already there
--
on safe_addtag(the_note, the_tag)
    tell application "Evernote"
        try
            assign the_tag to the_note
        on error msg number nbr
            -- display dialog "Error: " & msg & " (" & nbr & ")"
        end try
    end tell
end safe_addtag

-- ============================================================================
-- Remove *the_tag* from *the_note* if it's there
--
on safe_rmtag(the_note, the_tag)
    tell application "Evernote"
        try
            unassign the_tag from the_note
        on error msg number nbr
            -- display dialog "Error: " & msg & " (" & nbr & ")"
        end try
    end tell
end safe_rmtag

-- ============================================================================
-- Return the substring of *source* (a string) beginning at *schar* (a
-- number) and going through *lchar* (a number)
--
on substring(source, schar, lchar)
    set rval to characters schar thru lchar of source
    return rval as string
end substring

-- ============================================================================
-- Parse a date in the format "YYYY.mmdd [HH:MM[:SS]]"
--
on ymd_parse(D)
    -- D must be a date string of the format
    --    YYYY.mmdd [HH:MM[:SS]]
    set rval to (current date)
    set rval's year to (text 1 thru 4 of D)
    set rval's month to (text 6 thru 7 of D)
    set rval's day to (text 8 thru 9 of D)

    if length of D is greater than or equal to 12 then
        set rval's hours to (text 11 thru 12 of D)
        if length of D is greater than or equal to 15 then
            set rval's minutes to (text 14 thru 15 of D)
            if length of D is greater than or equal to 18 then
                set rval's seconds to (text 17 thru 18 of D)
            end if
        end if
    end if
    return rval
end ymd_parse

-- ============================================================================
-- Return a date in the format "YYYY.mmdd"
--
on ymd_format(dateobj)
    set {year:y, month:m, day:d, hours:H, minutes:N, seconds:S, weekday:w} ¬
        to dateobj
    set mnum to zpad(1*m)
    set d to zpad(d)
    set H to zpad(H)
    set N to zpad(N)
    set S to zpad(S)
    set rval to y & "." & mnum & d
    return rval
end ymd_format

-- ============================================================================
-- Return a date in the format "YYYY.mmdd.sun"
--
on ymdw_format(dateobj)
    set {year:y, month:m, day:d, hours:H, minutes:N, seconds:S, weekday:w} ¬
        to dateobj
    set wkd to lowercase(substring(w as string, 1, 3))
    set mnum to zpad(1*m)
    set d to zpad(d)
    set H to zpad(H)
    set N to zpad(N)
    set S to zpad(S)
    set rval to y & "." & mnum & d & "." & wkd
    return rval
end ymdw_format

-- ============================================================================
-- Pad a single digit number with a leading zero
--
on zpad(N)
    set rval to "" & N
    if length of rval is less than 2 then
        set rval to "0" & rval
    end if
    return rval
end zpad
